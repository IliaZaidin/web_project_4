!function(){var t={588:function(t,e,n){function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}var o=function(t){"use strict";var e,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new j(r||[]);return i._invoke=function(t,e,n){var r=p;return function(o,i){if(r===y)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return I()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=L(a,n);if(c){if(c===_)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=y;var u=f(t,e,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===_)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(t,n,a),i}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var p="suspendedStart",h="suspendedYield",y="executing",d="completed",_={};function v(){}function m(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&o.call(k,a)&&(g=k);var E=b.prototype=v.prototype=Object.create(g);function S(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function n(i,a,c,u){var s=f(t[i],t,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===r(p)&&o.call(p,"__await")?e.resolve(p.__await).then((function(t){n("next",t,c,u)}),(function(t){n("throw",t,c,u)})):e.resolve(p).then((function(t){l.value=t,c(l)}),(function(t){return n("throw",t,c,u)}))}u(s.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return _;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var o=f(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,_;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,_):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,_)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(o.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:I}}function I(){return{value:e,done:!0}}return m.prototype=b,s(E,"constructor",b),s(b,"constructor",m),m.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,s(t,u,"GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},S(C.prototype),s(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new C(l(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(E),s(E,u,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=P,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(x),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return c.type="throw",c.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,_):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),_},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),_}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),_}},t}("object"===r(t=n.nmd(t))?t.exports:{});try{regeneratorRuntime=o}catch(t){"object"===("undefined"==typeof globalThis?"undefined":r(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r](i,i.exports,n),i.loaded=!0,i.exports}n.nmd=function(t){return t.paths=[],t.children||(t.children=[]),t},function(){"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n(588);var e=function(){function e(t,n,r,o,i,a){var c=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=t.name,this._link=t.link,this._cardId=t._id,this._ownerName=t.owner.name,this._ownerId=t.owner._id,this._myId=n,this._likesArray=t.likes,this._likesCount=t.likes.length,this._myLike=!1,this._newCard=r.querySelector(".picture-grid__item").cloneNode(!0),this._cardTitle=this._newCard.querySelector(".picture-grid__title"),this._cardPicture=this._newCard.querySelector(".picture-grid__img"),this._cardLikeButton=this._newCard.querySelector(".picture-grid__like"),this._cardLikes=this._newCard.querySelector(".picture-grid__likes"),this._cardDeleteButton=this._newCard.querySelector(".picture-grid__delete"),this._api=i,this._cardDeletePopup=a,this._handleCardClick=o,this._confirmCardDeletion=function(){c._api.deleteCard(c._cardId).then((function(){c._newCard.remove(),c._newCard=null})).catch((function(t){console.log("Error: ",t.status,t.statusText)})).finally((function(){c._cardDeletePopup.close()}))}}var n,r;return n=e,(r=[{key:"_setEventListeners",value:function(){var t=this;this._cardLikeButton.addEventListener("click",(function(e){t._myLike?t._api.dislike(t._cardId).then((function(n){t._cardLikes.textContent=n.likes.length,e.target.classList.remove("picture-grid__like_active"),t._myLike=!1})).catch((function(t){console.log("Error: ",t.status,t.statusText)})):t._api.like(t._cardId).then((function(n){t._cardLikes.textContent=n.likes.length,e.target.classList.add("picture-grid__like_active"),t._myLike=!0})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))})),this._cardDeleteButton.addEventListener("click",(function(){t._cardDeletePopup.open(),t._cardDeletePopup.setEventListeners(t._confirmCardDeletion)})),this._newCard.querySelector(".picture-grid__img").addEventListener("click",(function(e){var n=t._text+" (uploaded by "+t._ownerName+")";t._handleCardClick(t._link,n)}))}},{key:"_checkMyLikes",value:function(){var t=this;this._likesArray.forEach((function(e){e._id===t._myId&&(t._cardLikeButton.classList.add("picture-grid__like_active"),t._myLike=!0)}))}},{key:"_checkCardOwner",value:function(){this._ownerId===this._myId&&this._cardDeleteButton.classList.remove("picture-grid__delete_disabled")}},{key:"_presetNewCard",value:function(){this._cardTitle.textContent=this._text,this._cardPicture.src=this._link,this._cardPicture.alt=this._text,this._cardLikes.textContent=this._likesCount,this._checkMyLikes(),this._checkCardOwner()}},{key:"createCard",value:function(){return this._presetNewCard(),this._setEventListeners(),this._newCard}}])&&t(n.prototype,r),e}();function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=n,this._inputFields=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=n.querySelector(e.submitButtonSelector)}var e,n;return e=t,(n=[{key:"_disableSubmitButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","")}},{key:"_enableSubmitButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled","")}},{key:"_toggleButtonState",value:function(){this._inputFields.some((function(t){return!t.validity.valid}))?this._disableSubmitButton(this._buttonElement):this._enableSubmitButton(this._buttonElement)}},{key:"_showInputError",value:function(t,e){t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t,e){t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}},{key:"_checkInputValidity",value:function(t){var e=this._formElement.querySelector("#".concat(t.id,"_error"));t.validity.valid?this._hideInputError(t,e):this._showInputError(t,e)}},{key:"_setEventListeners",value:function(){var t=this;this._inputFields.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var t=this;this._disableSubmitButton(),this._inputFields.forEach((function(e){var n=t._formElement.querySelector("#".concat(e.id,"_error"));t._hideInputError(e,n)}))}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&r(e.prototype,n),t}();function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(e,n,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=e,this._userJob=n,this._userAvatar=r}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,job:this._userJob.textContent}}},{key:"setUserInfo",value:function(t,e){this._userName.textContent=t,this._userJob.textContent=e}},{key:"setUserAvatar",value:function(t){this._userAvatar.src=t}}])&&i(e.prototype,n),t}();function c(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popupItem=document.querySelector(e),this._popupCloseButton=this._popupItem.querySelector(".popup__close"),this._closeOnEscape=function(t){"Escape"===t.key&&n.close()},this._closeOnButtonClick=function(t){n.close(),t.stopImmediatePropagation()},this._closeOnOverlayClick=function(t){var e;(e=t.target.classList,function(t){if(Array.isArray(t))return c(t)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return c(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).includes("popup")&&n.close(),t.stopImmediatePropagation()}}var e,n;return e=t,(n=[{key:"open",value:function(){document.addEventListener("keyup",this._closeOnEscape),this._popupCloseButton.addEventListener("click",this._closeOnButtonClick),this._popupItem.addEventListener("mousedown",this._closeOnOverlayClick),this._popupItem.classList.add("popup_is_opened")}},{key:"close",value:function(){document.removeEventListener("keyup",this._closeOnEscape),this._popupCloseButton.removeEventListener("click",this._closeOnButtonClick),this._popupItem.removeEventListener("mousedown",this._closeOnOverlayClick),this._popupItem.classList.remove("popup_is_opened")}}])&&u(e.prototype,n),t}();function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=h(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},p.apply(this,arguments)}function h(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}function y(t,e){return y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},y(t,e)}function d(t,e){if(e&&("object"===l(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(r);if(o){var n=_(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return d(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._submitForm=t,n._fieldsData={},n._formElement=n._popupItem.querySelector(".form"),n._inputsList=n._popupItem.querySelectorAll(".form__input"),n}return e=a,(n=[{key:"close",value:function(){this._formElement.reset(),p(_(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var t=this;this._inputsList.forEach((function(e){t._fieldsData[e.name]=e.value}))}},{key:"setEventListeners",value:function(){var t=this;this._popupItem.addEventListener("submit",(function(e){t._getInputValues(),t._submitForm(e,t._fieldsData),e.stopImmediatePropagation()}))}}])&&f(e.prototype,n),a}(s);function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=w(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},g.apply(this,arguments)}function w(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=S(t)););return t}function k(t,e){return k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},k(t,e)}function E(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function S(t){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},S(t)}var C=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&k(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=S(r);if(o){var n=S(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return E(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._popupItem=document.querySelector(t),e._popupTitle=e._popupItem.querySelector(".popup__title_type_picture"),e._popupLink=e._popupItem.querySelector(".popup__picture-link"),e}return e=a,(n=[{key:"open",value:function(t,e){this._popupLink.setAttribute("src",t),this._popupLink.setAttribute("alt",e),this._popupTitle.textContent=e,g(S(a.prototype),"open",this).call(this)}}])&&b(e.prototype,n),a}(s);function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var O=function(){function t(e,n){var r=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=r,this._classContainer=document.querySelector(n)}var e,n;return e=t,(n=[{key:"addItem",value:function(t,e){this._classContainer.prepend(this._renderer(t,e))}},{key:"renderAll",value:function(t,e){var n=this;t.forEach((function(t){n.addItem(t,e)}))}}])&&L(e.prototype,n),t}();function x(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var j=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e.baseUrl,this._token=e.token}var e,n;return e=t,(n=[{key:"_checkResponse",value:function(t){return t.ok?t.json():Promise.reject(t)}},{key:"getUserData",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:{authorization:this._token}}).then(this._checkResponse)}},{key:"getCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:{authorization:this._token}}).then(this._checkResponse)}},{key:"editProfile",value:function(t,e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:e})}).then(this._checkResponse)}},{key:"updateProfilePicture",value:function(t){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then(this._checkResponse)}},{key:"addCard",value:function(t,e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:e})}).then(this._checkResponse)}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:{authorization:this._token}}).then(this._checkResponse)}},{key:"like",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:{authorization:this._token}}).then(this._checkResponse)}},{key:"dislike",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:{authorization:this._token}}).then(this._checkResponse)}}])&&x(e.prototype,n),t}();function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function I(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function T(){return T="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=R(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},T.apply(this,arguments)}function R(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=D(t)););return t}function B(t,e){return B=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},B(t,e)}function q(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function D(t){return D=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},D(t)}var A=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&B(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=D(r);if(o){var n=D(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return q(this,t)});function a(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._confirmButton=e,n._confirmCardDeletion=0,n}return e=a,(n=[{key:"close",value:function(){T(D(a.prototype),"close",this).call(this),this._confirmButton.removeEventListener("click",this._confirmCardDeletion)}},{key:"setEventListeners",value:function(t){this._confirmButton.addEventListener("click",t),this._confirmCardDeletion=t}}])&&I(e.prototype,n),a}(s),N={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},U=document.querySelector(".profile__edit-button"),F=document.querySelector(".form__input_type_name"),V=document.querySelector(".form__input_type_about"),z=document.querySelector(".profile__picture"),G=document.querySelector(".profile__add-button"),J=document.querySelector(".card-template").content,M=document.querySelector(".form__submit_type_confirm"),H=document.querySelector(".form__submit_type_profile"),Y=document.querySelector(".form__submit_type_avatar"),$=document.querySelector(".form__submit_type_card"),K=document.querySelector(".profile__title"),Q=document.querySelector(".profile__subtitle"),W=document.querySelector(".profile__picture"),X=new j({baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"3818518a-0f00-4af2-b13c-93949a3b17de"}),Z=new o(N,document.querySelector(".form_type_profile")),tt=new o(N,document.querySelector(".form_type_card")),et=new o(N,document.querySelector(".form_type_avatar")),nt=new v((function(t,e){t.preventDefault(),H.textContent="Saving...",X.editProfile(e.profile_name,e.profile_job).then((function(t){at.setUserInfo(t.name,t.about)})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)})).finally((function(){nt.close(),H.textContent="Save"}))}),".popup_type_profile"),rt=new v((function(t,e){t.preventDefault(),$.textContent="Saving...",X.getUserData().then((function(t){X.addCard(e.card_title,e.card_link).then((function(e){it.addItem(e,t._id)})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)})).finally((function(){$.textContent="Create",rt.close()}))}))}),".popup_type_card"),ot=new v((function(t,e){t.preventDefault(),Y.textContent="Saving...",X.updateProfilePicture(e.avatar_link).then((function(t){at.setUserAvatar(t.avatar)})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)})).finally((function(){ot.close(),Y.textContent="Save"}))}),".popup_type_avatar"),it=new O({renderer:function(t,n){return new e(t,n,J,st,X,ut).createCard()}},".picture-grid"),at=new a(K,Q,W),ct=new C(".popup_type_picture"),ut=new A(".popup_type_confirm",M);function st(t,e){ct.open(t,e)}U.addEventListener("click",(function(){var t=at.getUserInfo(),e=t.name,n=t.job;F.value=e,V.value=n,Z.resetValidation(),nt.setEventListeners(),nt.open()})),G.addEventListener("click",(function(){tt.resetValidation(),rt.setEventListeners(),rt.open()})),z.addEventListener("click",(function(){et.resetValidation(),ot.setEventListeners(),ot.open()})),window.onload=function(){X.getUserData().then((function(t){var e;at.setUserInfo(t.name,t.about),at.setUserAvatar(t.avatar),e=t._id,X.getCards().then((function(t){it.renderAll(t,e)})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))})).catch((function(t){console.log("Error: ",t.status,t.statusText)})),tt.enableValidation(),Z.enableValidation(),et.enableValidation()}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,