!function(){var t={588:function(t,e,r){function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var o=function(t){"use strict";var e,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function l(t,e,r,n){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new x(n||[]);return i._invoke=function(t,e,r){var n=p;return function(o,i){if(n===y)throw new Error("Generator is already running");if(n===d){if("throw"===o)throw i;return T()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=C(a,r);if(u){if(u===_)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=y;var c=f(t,e,r);if("normal"===c.type){if(n=r.done?d:h,c.arg===_)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(t,r,a),i}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var p="suspendedStart",h="suspendedYield",y="executing",d="completed",_={};function v(){}function m(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&o.call(k,a)&&(g=k);var E=b.prototype=v.prototype=Object.create(g);function S(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function r(i,a,u,c){var s=f(t[i],t,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===n(p)&&o.call(p,"__await")?e.resolve(p.__await).then((function(t){r("next",t,u,c)}),(function(t){r("throw",t,u,c)})):e.resolve(p).then((function(t){l.value=t,u(l)}),(function(t){return r("throw",t,u,c)}))}c(s.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}}function C(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,C(t,r),"throw"===r.method))return _;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return _}var o=f(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,_;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,_):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,_)}function j(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(j,this),this.reset(!0)}function P(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function r(){for(;++n<t.length;)if(o.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:T}}function T(){return{value:e,done:!0}}return m.prototype=b,s(E,"constructor",b),s(b,"constructor",m),m.displayName=s(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,b):(t.__proto__=b,s(t,c,"GeneratorFunction")),t.prototype=Object.create(E),t},t.awrap=function(t){return{__await:t}},S(L.prototype),s(L.prototype,u,(function(){return this})),t.AsyncIterator=L,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new L(l(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(E),s(E,c,"Generator"),s(E,a,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=P,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(n,o){return u.type="throw",u.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,_):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),_},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),_}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:P(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),_}},t}("object"===n(t=r.nmd(t))?t.exports:{});try{regeneratorRuntime=o}catch(t){"object"===("undefined"==typeof globalThis?"undefined":n(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,loaded:!1,exports:{}};return t[n](i,i.exports,r),i.loaded=!0,i.exports}r.nmd=function(t){return t.paths=[],t.children||(t.children=[]),t},function(){"use strict";function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}r(588);var e=function(){function e(t,r,n,o,i,a,u){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=t.name,this._link=t.link,this._cardId=t._id,this._ownerName=t.owner.name,this._ownerId=t.owner._id,this._myId=r,this._likesArray=t.likes,this._likesCount=t.likes.length,this._myLike=!1,this._newCard=n.querySelector(".picture-grid__item").cloneNode(!0),this._cardTitle=this._newCard.querySelector(".picture-grid__title"),this._cardPicture=this._newCard.querySelector(".picture-grid__img"),this._cardLikeButton=this._newCard.querySelector(".picture-grid__like"),this._cardLikes=this._newCard.querySelector(".picture-grid__likes"),this._cardDeleteButton=this._newCard.querySelector(".picture-grid__delete"),this._confirmButton=u,this._api=i,this._handleCardClick=o,this._cardDeletePopup=a}var r,n;return r=e,(n=[{key:"_setEventListeners",value:function(){var t=this;this._cardLikeButton.addEventListener("click",(function(e){t._myLike?(e.target.classList.remove("picture-grid__like_active"),t._myLike=!1,t._api.dislike(t._cardId).then((function(e){t._cardLikes.textContent=e.likes.length}))):(e.target.classList.add("picture-grid__like_active"),t._myLike=!0,t._api.like(t._cardId).then((function(e){t._cardLikes.textContent=e.likes.length})))})),this._cardDeleteButton.addEventListener("click",(function(){t._cardDeletePopup.open(),t._cardDeletePopup.setEventListeners(),t._confirmButton.addEventListener("click",(function(){t._api.deleteCard(t._cardId).then((function(){t._newCard.remove(),t._newCard=null,t._cardDeletePopup.close(),t._confirmButton.removeEventListener("click",t._deleteCard)}))}))})),this._newCard.querySelector(".picture-grid__img").addEventListener("click",(function(e){var r=t._likesArray.map((function(t){return" "+t.name})),n=t._text+" by "+t._ownerName+". Liked by:"+r;t._handleCardClick(t._link,n)}))}},{key:"_checkMyLikes",value:function(){var t=this;this._likesArray.forEach((function(e){e._id===t._myId&&(t._cardLikeButton.classList.add("picture-grid__like_active"),t._myLike=!0)}))}},{key:"_checkCardOwner",value:function(){this._ownerId===this._myId&&this._cardDeleteButton.classList.remove("picture-grid__delete_disabled")}},{key:"_presetNewCard",value:function(){this._cardTitle.textContent=this._text,this._cardPicture.src=this._link,this._cardPicture.alt=this._text,this._cardLikes.textContent=this._likesCount,this._checkMyLikes(),this._checkCardOwner()}},{key:"createCard",value:function(){return this._presetNewCard(),this._setEventListeners(),this._newCard}}])&&t(r.prototype,n),e}();function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=r,this._inputFields=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=r.querySelector(e.submitButtonSelector)}var e,r;return e=t,(r=[{key:"_disableSubmitButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled","")}},{key:"_enableSubmitButton",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled","")}},{key:"_toggleButtonState",value:function(){this._inputFields.some((function(t){return!t.validity.valid}))?this._disableSubmitButton(this._buttonElement):this._enableSubmitButton(this._buttonElement)}},{key:"_showInputError",value:function(t,e){t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t,e){t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}},{key:"_checkInputValidity",value:function(t){var e=this._formElement.querySelector("#".concat(t.id,"_error"));t.validity.valid?this._hideInputError(t,e):this._showInputError(t,e)}},{key:"_setEventListeners",value:function(){var t=this;this._inputFields.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState(t._inputFields,t._buttonElement)}))}))}},{key:"resetValidation",value:function(){var t=this;this._disableSubmitButton(),this._inputFields.forEach((function(e){var r=t._formElement.querySelector("#".concat(e.id,"_error"));t._hideInputError(e,r)}))}},{key:"enableValidation",value:function(){this._setEventListeners()}}])&&n(e.prototype,r),t}();function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=document.querySelector(".profile__title"),this._userJob=document.querySelector(".profile__subtitle"),this._userAvatar=document.querySelector(".profile__picture")}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,job:this._userJob.textContent}}},{key:"setUserInfo",value:function(t,e){this._userName.textContent=t,this._userJob.textContent=e}},{key:"setUserAvatar",value:function(t){this._userAvatar.src=t}}])&&i(e.prototype,r),t}();function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popupItem=document.querySelector(e),this._popupCloseButton=this._popupItem.querySelector(".popup__close"),this._closeOnEscape=function(t){"Escape"===t.key&&r.close()}}var e,r;return e=t,(r=[{key:"open",value:function(){document.addEventListener("keyup",this._closeOnEscape),this._popupItem.classList.add("popup_is_opened")}},{key:"close",value:function(){document.removeEventListener("keyup",this._closeOnEscape),this._popupItem.classList.remove("popup_is_opened")}},{key:"setEventListeners",value:function(){var t=this;this._popupCloseButton.addEventListener("click",(function(e){t.close(),e.stopImmediatePropagation()})),this._popupItem.addEventListener("mousedown",(function(e){var r;(r=e.target.classList,function(t){if(Array.isArray(t))return u(t)}(r)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return u(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).includes("popup")&&t.close(),e.stopImmediatePropagation()}))}}])&&c(e.prototype,r),t}();function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=h(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},p.apply(this,arguments)}function h(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}function y(t,e){return y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},y(t,e)}function d(t,e){if(e&&("object"===l(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(n);if(o){var r=_(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return d(this,t)});function a(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._submitForm=t,r._fieldsData={},r._formElement=r._popupItem.querySelector(".form"),r._inputsList=r._popupItem.querySelectorAll(".form__input"),r}return e=a,(r=[{key:"close",value:function(){this._formElement.reset(),p(_(a.prototype),"close",this).call(this)}},{key:"_getInputValues",value:function(){var t=this;this._inputsList.forEach((function(e){t._fieldsData[e.name]=e.value}))}},{key:"setEventListeners",value:function(){var t=this;this._popupItem.addEventListener("submit",(function(e){t._getInputValues(),t._submitForm(e,t._fieldsData),e.stopImmediatePropagation()})),p(_(a.prototype),"setEventListeners",this).call(this)}}])&&f(e.prototype,r),a}(s);function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function b(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=w(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},g.apply(this,arguments)}function w(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=S(t)););return t}function k(t,e){return k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},k(t,e)}function E(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function S(t){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},S(t)}var L=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&k(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=S(n);if(o){var r=S(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return E(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._popupTitle=document.querySelector(".popup__title_type_picture"),e._popupLink=document.querySelector(".popup__picture-link"),e}return e=a,(r=[{key:"open",value:function(t,e){this._popupLink.setAttribute("src",t),this._popupLink.setAttribute("alt",e),this._popupTitle.textContent=e,g(S(a.prototype),"open",this).call(this)}}])&&b(e.prototype,r),a}(s);function C(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var j=function(){function t(e,r){var n=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=n,this._classContainer=document.querySelector(r)}var e,r;return e=t,(r=[{key:"addItem",value:function(t,e){this._classContainer.prepend(this._renderer(t,e))}},{key:"renderAll",value:function(t,e){var r=this;t.forEach((function(t){r.addItem(t,e)}))}}])&&C(e.prototype,r),t}();function O(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var x=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e.baseUrl,this._token=e.token}var e,r;return e=t,(r=[{key:"getUserData",value:function(){return fetch("".concat(this._url,"/users/me"),{headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))}},{key:"getCards",value:function(){return fetch("".concat(this._url,"/cards"),{headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))}},{key:"editProfile",value:function(t,e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:e})}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)}))}},{key:"updateProfilePicture",value:function(t){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)}))}},{key:"addCard",value:function(t,e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:e})}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){window.alert("Something went wrong. Please cancel and try again."),console.log("Error: ",t.status,t.statusText)}))}},{key:"deleteCard",value:function(t){return fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))}},{key:"like",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))}},{key:"dislike",value:function(t){return fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:{authorization:this._token}}).then((function(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))})).catch((function(t){console.log("Error: ",t.status,t.statusText)}))}}])&&O(e.prototype,r),t}();function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function T(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function I(){return I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=q(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},I.apply(this,arguments)}function q(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=A(t)););return t}function B(t,e){return B=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},B(t,e)}function R(t,e){if(e&&("object"===P(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function A(t){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},A(t)}var D=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&B(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=A(n);if(o){var r=A(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return R(this,t)});function a(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,t)}return e=a,(r=[{key:"setEventListeners",value:function(){I(A(a.prototype),"setEventListeners",this).call(this)}}])&&T(e.prototype,r),a}(s),N={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},U=document.querySelector(".profile__edit-button"),F=document.querySelector(".form__input_type_name"),V=document.querySelector(".form__input_type_about"),z=document.querySelector(".profile__picture"),G=document.querySelector(".profile__add-button"),J=document.querySelector(".card-template").content,M=document.querySelector(".form__submit_type_confirm"),H=document.querySelector(".form__submit_type_profile"),Y=document.querySelector(".form__submit_type_avatar"),$=document.querySelector(".form__submit_type_card"),K=new x({baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"3818518a-0f00-4af2-b13c-93949a3b17de"}),Q=new o(N,document.querySelector(".form_type_profile")),W=new o(N,document.querySelector(".form_type_card")),X=new o(N,document.querySelector(".form_type_avatar")),Z=new v((function(t,e){t.preventDefault(),H.textContent="Saving...",K.editProfile(e.profile_name,e.profile_job).then((function(t){nt.setUserInfo(t.name,t.about),Z.close(),H.textContent="Save"}))}),".popup_type_profile"),tt=new v((function(t,e){t.preventDefault(),$.textContent="Saving...",K.getUserData().then((function(t){K.addCard(e.card_title,e.card_link).then((function(e){rt.addItem(e,t._id),$.textContent="Create",tt.close()}))}))}),".popup_type_card"),et=new v((function(t,e){t.preventDefault(),Y.textContent="Saving...",K.updateProfilePicture(e.avatar_link).then((function(t){nt.setUserAvatar(t.avatar),et.close(),Y.textContent="Save"}))}),".popup_type_avatar"),rt=new j({renderer:function(t,r){return new e(t,r,J,at,K,it,M).createCard()}},".picture-grid"),nt=new a,ot=new L(".popup_type_picture"),it=new D(".popup_type_confirm");function at(t,e){ot.open(t,e)}U.addEventListener("click",(function(){var t=nt.getUserInfo(),e=t.name,r=t.job;F.value=e,V.value=r,Q.resetValidation(),H.textContent="Save",Z.open()})),G.addEventListener("click",(function(){W.resetValidation(),$.textContent="Create",tt.open()})),z.addEventListener("click",(function(){X.resetValidation(),Y.textContent="Save",et.open()})),window.onload=function(){K.getUserData().then((function(t){var e;nt.setUserInfo(t.name,t.about),nt.setUserAvatar(t.avatar),e=t._id,K.getCards().then((function(t){rt.renderAll(t,e)}))})),W.enableValidation(),Q.enableValidation(),X.enableValidation(),ot.setEventListeners(),Z.setEventListeners(),tt.setEventListeners(),et.setEventListeners()}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,